
@model BrickPile.UI.Models.ModelReference

@{
    var viewData = ViewData;
    var metadata = ViewData.ModelMetadata;
    var placeHolder = !string.IsNullOrWhiteSpace(metadata.Watermark) ? "placeholder=\"" + HttpUtility.HtmlAttributeEncode(metadata.Watermark) + "\"" : string.Empty;
    var id = viewData.TemplateInfo.GetFullHtmlFieldId("Name");
    var name = viewData.TemplateInfo.GetFullHtmlFieldName("Name");
    var cssClass = "text-box single-line modelreference";
    var value = Model != null ? Model.Name : "";

    ModelState state;

    if (viewData.ModelState.TryGetValue(name, out state) && (state.Errors.Count > 0))
    {
        cssClass += " " + HtmlHelper.ValidationInputCssClassName;
    }
    

    var rules = new System.Text.StringBuilder();
    var rulesDictionary = ModelValidatorProviders.Providers
                                                 .GetValidators(metadata, ViewContext)
                                                 .SelectMany(v => v.GetClientValidationRules());
                                                 
    var unobtrusiveJavaScriptEnabled = ViewContext.UnobtrusiveJavaScriptEnabled;
    
    foreach (var rule in rulesDictionary) {
        if (rule is ModelClientValidationRequiredRule) {
            rules.Append(" required=\"required\"");

            if (unobtrusiveJavaScriptEnabled) {
                rules.AppendFormat(Culture, " data-val-required=\"{0}\"", HttpUtility.HtmlEncode(rule.ErrorMessage ?? string.Empty));
            }

        } else if (rule is ModelClientValidationRegexRule) {
            rules.AppendFormat(Culture, " pattern=\"{0}\"", rule.ValidationParameters["pattern"]);

            if (unobtrusiveJavaScriptEnabled) {
                rules.AppendFormat(Culture, " data-val-pattern=\"{0}\"", HttpUtility.HtmlEncode(rule.ErrorMessage ?? string.Empty));
            }
        } else if (rule is ModelClientValidationRangeRule) {
            rules.AppendFormat(Culture, " min=\"{0}\"", rule.ValidationParameters["min"]);
            rules.AppendFormat(Culture, " max=\"{0}\"", rule.ValidationParameters["max"]);

            if (unobtrusiveJavaScriptEnabled) {
                rules.AppendFormat(Culture, " data-val-range=\"{0}\"", HttpUtility.HtmlEncode(rule.ErrorMessage ?? string.Empty));
            }
        } else {
            if (!unobtrusiveJavaScriptEnabled) {
                continue;
            }

            var dictionaryKey = "data-val-" + rule.ValidationType;

            rules.AppendFormat(Culture, " {0}=\"{1}\"", dictionaryKey, HttpUtility.HtmlEncode(rule.ErrorMessage));

            dictionaryKey = dictionaryKey + "-";

            foreach (var pair in rule.ValidationParameters) {
                rules.AppendFormat(Culture, " {0}=\"{1}\"", dictionaryKey + pair.Key, HttpUtility.HtmlEncode(pair.Value));
            }
        }
    }

    var validators = rules.ToString();
}

<input type="text" id="@id" name="@name" class="@cssClass" value="@value" @Html.Raw(placeHolder) @validators /><span class="button modelreference"><input type="button" value="Get page..." id="@ViewData.TemplateInfo.HtmlFieldPrefix.Replace('.', '_')" /></span>
@Html.HiddenFor(x => Model.Id)
